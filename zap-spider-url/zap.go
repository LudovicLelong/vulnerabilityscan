package zap_spider_url

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"time"
)

const (
	ZapBaseURL = "http://localhost:8082"
)

type ZAPv2 struct {
	APIKey  string
	BaseURL string
	Client  *http.Client
	Target  string
}

func NewZAPv2WithAPIKey(apiKey string) *ZAPv2 {
	return &ZAPv2{
		APIKey:  apiKey,
		BaseURL: ZapBaseURL,
		Client:  &http.Client{},
	}
}

func (zap *ZAPv2) Request(endpoint string, params url.Values) ([]byte, error) {
	params.Add("apikey", zap.APIKey)
	fullURL := fmt.Sprintf("%s%s?%s", zap.BaseURL, endpoint, params.Encode())

	fmt.Printf("Request URL: %s\n", fullURL) // Log supplémentaire

	resp, err := zap.Client.Get(fullURL)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	return ioutil.ReadAll(resp.Body)
}

func (zap *ZAPv2) ActiveScan(target string) (string, error) {
	params := url.Values{}
	params.Add("url", target)

	body, err := zap.Request("/JSON/ascan/action/scan/", params)
	if err != nil {
		return "", err
	}

	fmt.Println("Response from Active Scan:", string(body)) // Log supplémentaire

	var result map[string]interface{}
	if err := json.Unmarshal(body, &result); err != nil {
		return "", err
	}

	scanID, ok := result["scan"].(string)
	if !ok {
		return "", fmt.Errorf("failed to start active scan")
	}

	return scanID, nil
}

func (zap *ZAPv2) ScanStatus(scanID string) (string, error) {
	params := url.Values{}
	params.Add("scanId", scanID)

	body, err := zap.Request("/JSON/ascan/view/status/", params)
	if err != nil {
		return "", err
	}

	var result map[string]interface{}
	if err := json.Unmarshal(body, &result); err != nil {
		return "", err
	}

	return fmt.Sprintf("%v", result["status"]), nil
}

func (zap *ZAPv2) Alerts(baseurl string) ([]map[string]interface{}, error) {
	params := url.Values{}
	params.Add("baseurl", baseurl)

	body, err := zap.Request("/JSON/core/view/alerts/", params)
	if err != nil {
		return nil, err
	}

	var result map[string]interface{}
	if err := json.Unmarshal(body, &result); err != nil {
		return nil, err
	}

	alerts, ok := result["alerts"].([]interface{})
	if !ok {
		return nil, fmt.Errorf("failed to retrieve alerts")
	}

	alertsMap := make([]map[string]interface{}, len(alerts))
	for i, alert := range alerts {
		alertsMap[i] = alert.(map[string]interface{})
	}

	return alertsMap, nil
}

func (zap *ZAPv2) WaitForScanToComplete(scanID string) error {
	for {
		status, err := zap.ScanStatus(scanID)
		if err != nil {
			return err
		}

		if status == "100" {
			break
		}

		fmt.Printf("Scan ID: %s, Progress: %s%%\n", scanID, status)
		time.Sleep(5 * time.Second)
	}
	return nil
}
