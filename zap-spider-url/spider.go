package zap_spider_url

import (
	"encoding/json"
	"fmt"
	"net/url"
)

func (zap *ZAPv2) SpiderScan() (string, error) {
	params := url.Values{}
	params.Add("url", Target)

	body, err := zap.Request("/JSON/spider/action/scan/", params)
	if err != nil {
		return "", err
	}

	fmt.Println("Response from Traditional Spider Scan:", string(body)) // Log supplémentaire

	var result map[string]interface{}
	if err := json.Unmarshal(body, &result); err != nil {
		return "", err
	}

	scanID, ok := result["scan"].(string)
	if !ok {
		return "", fmt.Errorf("failed to start traditional spider scan")
	}

	return scanID, nil
}

func (zap *ZAPv2) SpiderStatus(scanID string) (string, error) {
	params := url.Values{}
	params.Add("scanId", scanID)

	body, err := zap.Request("/JSON/spider/view/status/", params)
	if err != nil {
		return "", err
	}

	fmt.Println("Response from Spider Status:", string(body)) // Log supplémentaire

	var status SpiderStatus
	if err := json.Unmarshal(body, &status); err != nil {
		return "", err
	}

	return status.Status, nil
}

func (zap *ZAPv2) SpiderResults(start, count int) ([]string, error) { // Changer le type de retour ici
	params := url.Values{}
	params.Add("start", fmt.Sprintf("%d", start))
	params.Add("count", fmt.Sprintf("%d", count))

	body, err := zap.Request("/JSON/spider/view/results/", params)
	if err != nil {
		return nil, err
	}

	fmt.Println("Response from Spider Results:", string(body)) // Log supplémentaire

	var results SpiderResults
	if err := json.Unmarshal(body, &results); err != nil {
		return nil, err
	}

	return results.Results, nil // Changer le type de retour ici
}
