package ajax_spider

import (
	"encoding/json"
	"fmt"
	"net/url"
)

func (zap *ZAPv2) AjaxSpiderScan() (string, error) {
	params := url.Values{}
	params.Add("url", Target)

	body, err := zap.Request("/JSON/ajaxSpider/action/scan/", params)
	if err != nil {
		return "", err
	}

	fmt.Println("Response from AJAX Spider Scan:", string(body)) // Log supplémentaire

	var result map[string]interface{}
	if err := json.Unmarshal(body, &result); err != nil {
		return "", err
	}

	scanID, ok := result["scan"].(string)
	if !ok {
		return "", fmt.Errorf("failed to start AJAX spider scan")
	}

	return scanID, nil
}

func (zap *ZAPv2) AjaxSpiderStatus() (string, error) {
	body, err := zap.Request("/JSON/ajaxSpider/view/status/", url.Values{})
	if err != nil {
		return "", err
	}

	fmt.Println("Response from AJAX Spider Status:", string(body)) // Log supplémentaire

	var status map[string]interface{}
	if err := json.Unmarshal(body, &status); err != nil {
		return "", err
	}

	statusStr, ok := status["status"].(string)
	if !ok {
		return "", fmt.Errorf("failed to get AJAX spider status")
	}

	return statusStr, nil
}

func (zap *ZAPv2) AjaxSpiderResults(start, count int) ([]string, error) {
	params := url.Values{}
	params.Add("start", fmt.Sprintf("%d", start))
	params.Add("count", fmt.Sprintf("%d", count))

	body, err := zap.Request("/JSON/ajaxSpider/view/results/", params)
	if err != nil {
		return nil, err
	}

	fmt.Println("Response from AJAX Spider Results:", string(body)) // Log supplémentaire

	var results SpiderResults
	if err := json.Unmarshal(body, &results); err != nil {
		return nil, err
	}

	return results.Results, nil
}
