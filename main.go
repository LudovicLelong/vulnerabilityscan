package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"
	"vulnerabilityscan/zap-spider-url"
)

type ScanRequest struct {
	APIKey string `json:"api_key"`
	Target string `json:"target"`
}

func startSpiderScanHandler(w http.ResponseWriter, r *http.Request) {
	var request ScanRequest
	err := json.NewDecoder(r.Body).Decode(&request)
	if err != nil {
		http.Error(w, "Invalid request payload", http.StatusBadRequest)
		return
	}

	zapClient := zap_spider_url.NewZAPv2WithAPIKey(request.APIKey)
	zapClient.Target = request.Target

	fmt.Printf("Spider target %s\n", zapClient.Target)

	// Utiliser le Traditional Spider Scan
	scanID, err := zapClient.SpiderScan()
	if err != nil {
		http.Error(w, fmt.Sprintf("Erreur lors du démarrage du Traditional Spider: %v", err), http.StatusInternalServerError)
		return
	}
	fmt.Printf("Scan ID: %s\n", scanID)

	timeout := time.Now().Add(5 * time.Minute)
	for {
		status, err := zapClient.SpiderStatus(scanID)
		if err != nil {
			http.Error(w, fmt.Sprintf("Erreur lors de la vérification du statut du Spider: %v", err), http.StatusInternalServerError)
			return
		}
		if status == "100" { // Vérifiez si le Spider est à 100%
			fmt.Println("Spider a terminé à 100%")
			break
		}
		if time.Now().After(timeout) {
			http.Error(w, "Timeout atteint", http.StatusGatewayTimeout)
			return
		}
		fmt.Printf("Spider status: %s%%\n", status) // Affiche le pourcentage de progression
		time.Sleep(2 * time.Second)
	}

	fmt.Println("Spider completed")
	results, err := zapClient.SpiderResults(0, 100)
	if err != nil {
		http.Error(w, fmt.Sprintf("Erreur lors de l'obtention des résultats du Spider: %v", err), http.StatusInternalServerError)
		return
	}

	fmt.Printf("Nombre de résultats du Spider: %d\n", len(results))
	fmt.Println("Spider results:", results)

	response := map[string]interface{}{
		"scan_id": scanID,
		"results": results,
	}
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func main() {
	http.HandleFunc("/start-spider-scan", startSpiderScanHandler)
	log.Println("Server running on port 8080")
	log.Fatal(http.ListenAndServe(":8080", nil))
}
