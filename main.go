package main

import (
	"fmt"
	"time"
	"vulnerabilityscan/zap-ajax-spider"
	"vulnerabilityscan/zap-spider-url"
)

func main() {
	zapClient := zap_spider_url.NewZAPv2()
	ajaxZapClient := ajax_spider.NewZAPv2()

	fmt.Printf("Spider target %s\n", zap_spider_url.Target)

	// Utiliser le Traditional Spider Scan
	traditionalScanID, err := zapClient.SpiderScan()
	if err != nil {
		fmt.Println("Erreur lors du démarrage du Traditional Spider:", err)
		return
	}
	fmt.Printf("Traditional Spider Scan ID: %s\n", traditionalScanID)

	traditionalTimeout := time.Now().Add(2 * time.Minute)
	for {
		status, err := zapClient.SpiderStatus(traditionalScanID)
		if err != nil {
			fmt.Println("Erreur lors de la vérification du statut du Traditional Spider:", err)
			return
		}
		if status == "100" { // Vérifiez si le Spider est à 100%
			fmt.Println("Traditional Spider a terminé à 100%")
			break
		}
		if time.Now().After(traditionalTimeout) {
			fmt.Println("Traditional Spider Timeout atteint")
			break
		}
		fmt.Printf("Traditional Spider status: %s%%\n", status) // Affiche le pourcentage de progression
		time.Sleep(2 * time.Second)
	}

	fmt.Println("Traditional Spider completed")
	traditionalResults, err := zapClient.SpiderResults(0, 100)
	if err != nil {
		fmt.Println("Erreur lors de l'obtention des résultats du Traditional Spider:", err)
		return
	}
	fmt.Printf("Nombre de résultats du Traditional Spider: %d\n", len(traditionalResults))

	// Utiliser l'AJAX Spider Scan
	ajaxZapClient.AjaxSpiderScan()
	if err != nil {
		fmt.Println("Erreur lors du démarrage de l'AJAX Spider:", err)
	}
}
