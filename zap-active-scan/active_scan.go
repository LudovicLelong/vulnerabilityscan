package active_scan

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"time"
)

type ActiveScanRequest struct {
	APIKey string `json:"api_key"`
	URL    string `json:"url"`
}

type ActiveScanResponse struct {
	URL    string `json:"url"`
	Status string `json:"status"`
	Error  string `json:"error,omitempty"`
}

func StartActiveScanHandler(w http.ResponseWriter, r *http.Request) {
	log.Println("Received request to start Active Scan")

	body, err := ioutil.ReadAll(r.Body)
	if err != nil {
		http.Error(w, "Unable to read request body", http.StatusBadRequest)
		log.Printf("Error reading request body: %v", err)
		return
	}
	log.Printf("Request body: %s", string(body))

	var request ActiveScanRequest
	err = json.Unmarshal(body, &request)
	if err != nil {
		http.Error(w, "Invalid request payload", http.StatusBadRequest)
		log.Printf("Error decoding JSON: %v", err)
		return
	}

	log.Printf("Decoded request: %+v\n", request)

	zapClient := NewZAPv2()
	err = zapClient.StopScan()
	if err != nil {
		http.Error(w, "Failed to stop previous scans", http.StatusInternalServerError)
		log.Printf("Error stopping previous scans: %v", err)
		return
	}

	log.Printf("Starting Active Scan for URL: %s\n", request.URL)
	scanID, err := zapClient.StartActiveScan(request.URL)
	if err != nil {
		http.Error(w, "Failed to start active scan", http.StatusInternalServerError)
		log.Printf("Error starting active scan: %v", err)
		return
	}
	log.Printf("Scan ID: %s\n", scanID)

	timeout := time.Now().Add(10 * time.Minute)
	for {
		status, err := zapClient.ScanStatus(scanID)
		if err != nil {
			http.Error(w, "Failed to get scan status", http.StatusInternalServerError)
			log.Printf("Error getting scan status: %v", err)
			return
		}
		log.Printf("Active Scan status for URL %s: %s%%\n", request.URL, status)
		if status == "100" {
			log.Printf("Active Scan for URL %s completed at 100%%\n", request.URL)
			break
		}
		if time.Now().After(timeout) {
			http.Error(w, "Timeout reached for active scan", http.StatusGatewayTimeout)
			log.Printf("Timeout reached for active scan ID: %s", scanID)
			return
		}
		time.Sleep(2 * time.Second)
	}

	log.Println("Retrieving Active Scan results")
	results, err := zapClient.ScanResults(request.URL)
	if err != nil {
		http.Error(w, "Failed to retrieve scan results", http.StatusInternalServerError)
		log.Printf("Error retrieving scan results: %v", err)
		return
	}

	log.Printf("Number of results: %d\n", len(results))
	log.Printf("Scan results: %+v\n", results)

	response := map[string]interface{}{
		"url":     request.URL,
		"results": results,
	}
	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(response); err != nil {
		log.Printf("Error encoding response: %v", err)
	}
}
