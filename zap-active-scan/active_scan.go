package active_scan

import (
	"encoding/json"
	"fmt"
	"net/url"
)

func (zap *ZAPv2) SpiderScan(target string) (string, error) {
	params := url.Values{}
	params.Add("url", target)

	body, err := zap.Request("/JSON/spider/action/scan/", params)
	if err != nil {
		return "", err
	}

	fmt.Println("Response from Spider Scan:", string(body)) // Log supplémentaire

	var result map[string]interface{}
	if err := json.Unmarshal(body, &result); err != nil {
		return "", err
	}

	if scanID, exists := result["scan"].(string); exists {
		return scanID, nil
	}

	return "", fmt.Errorf("failed to start spider scan")
}

func (zap *ZAPv2) SpiderStatus(scanID string) (string, error) {
	params := url.Values{}
	params.Add("scanId", scanID)

	body, err := zap.Request("/JSON/spider/view/status/", params)
	if err != nil {
		return "", err
	}

	var result map[string]interface{}
	if err := json.Unmarshal(body, &result); err != nil {
		return "", err
	}

	progress, ok := result["status"].(string)
	if !ok {
		return "", fmt.Errorf("could not retrieve spider progress")
	}

	return progress, nil
}

func (zap *ZAPv2) ActiveScan(target string) (string, error) {
	params := url.Values{}
	params.Add("url", target)

	body, err := zap.Request("/JSON/ascan/action/scan/", params)
	if err != nil {
		return "", err
	}

	fmt.Println("Response from Active Scan:", string(body)) // Log supplémentaire

	var result map[string]interface{}
	if err := json.Unmarshal(body, &result); err != nil {
		return "", err
	}

	if scanID, exists := result["scan"].(string); exists {
		return scanID, nil
	}

	return "", fmt.Errorf("failed to start active scan")
}

func (zap *ZAPv2) ScanStatus(scanID string) (string, error) {
	params := url.Values{}
	params.Add("scanId", scanID)

	body, err := zap.Request("/JSON/ascan/view/status/", params)
	if err != nil {
		return "", err
	}

	var result map[string]interface{}
	if err := json.Unmarshal(body, &result); err != nil {
		return "", err
	}

	progress, ok := result["status"].(string)
	if !ok {
		return "", fmt.Errorf("could not retrieve progress")
	}

	return progress, nil
}

func (zap *ZAPv2) ScanResults(baseURL string) ([]Alert, error) {
	params := url.Values{}
	params.Add("baseurl", baseURL)

	body, err := zap.Request("/JSON/core/view/alerts/", params)
	if err != nil {
		return nil, err
	}

	var result map[string]interface{}
	if err := json.Unmarshal(body, &result); err != nil {
		return nil, err
	}

	alertsJSON, err := json.Marshal(result["alerts"])
	if err != nil {
		return nil, err
	}

	var alerts []Alert
	if err := json.Unmarshal(alertsJSON, &alerts); err != nil {
		return nil, err
	}

	return alerts, nil
}

type Alert struct {
	URL         string `json:"url"`
	Risk        string `json:"risk"`
	Description string `json:"description"`
}
